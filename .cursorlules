# 학원 관리 시스템 (Academy Management System)

## 프로젝트 개요
- **목적**: 제한된 사용자(10명 이하)가 학원을 관리하기 위한 어드민 웹사이트
- **타겟 사용자**: 학원 관리자, 강사, 튜터
- **주요 특징**: 권한 기반 접근 제어, 학생/수업/출결/결제 통합 관리

## 기술 스택
- **Frontend**: Next.js 15 (App Router), TypeScript, Tailwind CSS
- **Database**: Supabase
- **Authentication**: Supabase Auth (이미 구현됨)
- **UI Components**: shadcn/ui
- **State Management**: React hooks (useState, useContext)

## 사용자 권한 체계
### 권한 레벨 (높은 순)
1. **Admin (개발자)**: 모든 권한 + 시스템 설정
2. **Owner (학원 오너)**: 모든 학원 운영 권한
3. **Teacher (선생)**: 담당 수업 및 학생 관리
4. **Tutor (튜터)**: 제한된 학생 관리 권한

### 권한별 접근 가능 메뉴
- **Admin**: 모든 메뉴 + 사용자 관리, 시스템 설정
- **Owner**: 대시보드, 학생관리, 출결관리, 성적관리, 수업관리, 결제관리, 강사관리
- **Teacher**: 대시보드, 담당 학생 조회, 출결 입력, 성적 입력, 담당 수업 조회
- **Tutor**: 대시보드, 담당 학생 조회, 출결 조회

## 사용자 플로우
1. **로그인 (필수 첫 페이지)**
   - 인증되지 않은 사용자는 모든 페이지에서 로그인 페이지로 리다이렉트
   - Supabase Auth로 인증

2. **로그인 후 → 대시보드**
   - 현재는 빈 상태 (다른 기능 구현 후 채울 예정)
   - 향후: 권한별 맞춤 위젯 표시

3. **주요 기능 접근**
   - 사이드바 네비게이션으로 메뉴 이동
   - 권한 없는 메뉴는 숨김 또는 비활성화

## 핵심 기능 모듈

### 1. 학생 관리
- 학생 정보 CRUD (이름, 연락처, 학년, 등록일 등)
- 학부모 정보 관리 (연락처, 관계)
- 학생별 수강 과목 조회
- 검색/필터링 (이름, 학년, 상태)

### 2. 등/하원 관리 (출결)
- 일일 출결 체크 (등원/하원 시간 기록)
- 결석/지각/조퇴 사유 입력
- 출결 통계 및 리포트
- 학부모 알림 연동 (향후)

### 3. 학습 관리 (성적)
- 시험/과제 성적 입력
- 과목별 성적 추이 그래프
- 학생별 성적표 생성
- 평균/순위 자동 계산

### 4. 수업/강의 관리
- 수업 스케줄 관리
- 강사-수업 배정
- 수업별 학생 명단
- 교실/시간 배정

### 5. 결제 내역 관리
- 월별 수강료 관리
- 납부/미납 상태 추적
- 결제 내역 조회 (날짜, 학생, 금액)
- 미납자 리스트 및 알림

### 6. 강사 관리
- 강사 정보 CRUD
- 담당 수업 배정
- 근무 스케줄 관리
- 급여 정보 (Owner/Admin만)

## 데이터베이스 구조 (Supabase)

### 주요 테이블
```sql
-- users: 사용자 (Supabase Auth 연동)
-- role: 'admin' | 'owner' | 'teacher' | 'tutor'

-- students: 학생 정보
-- parents: 학부모 정보
-- attendances: 출결 기록
-- grades: 성적 정보
-- classes: 수업/강의
-- payments: 결제 내역
-- teachers: 강사 정보
```
db 관련 작업을 할 때 반드시 먼저 db의 스키마를 확인하고 작업을 해주세요.
타이핑 오류로 불일치 하는 경우 반드시 물어보고 작업해주세요.

## 코딩 규칙

```

### 네이밍 컨벤션
- **파일명**: kebab-case (예: `student-list.tsx`, `attendance-table.tsx`)
- **컴포넌트명**: PascalCase (예: `StudentList`, `AttendanceTable`)
- **함수/변수**: camelCase (예: `getStudentList`, `isLoading`)
- **상수**: UPPER_SNAKE_CASE (예: `MAX_STUDENTS`, `ROLE_PERMISSIONS`)
- **타입/인터페이스**: PascalCase (예: `Student`, `UserRole`)

### TypeScript 규칙
- `any` 타입 사용 금지
- 모든 함수에 명시적 반환 타입 지정
- Props는 interface로 정의
- Supabase 타입은 자동 생성된 타입 사용

### 컴포넌트 작성 규칙
- 함수형 컴포넌트만 사용
- Server Component 우선, 필요시 `'use client'`
- 커스텀 훅으로 로직 분리
- 한 파일에 하나의 컴포넌트 원칙

### 권한 체크
```typescript
// 모든 protected 페이지에서 권한 체크
// lib/auth/permissions.ts에 권한 검증 함수 작성
const hasPermission = (userRole: Role, requiredRole: Role) => boolean

// 컴포넌트에서 사용
if (!hasPermission(user.role, 'owner')) {
  return <Unauthorized />
}
```

## UI/UX 원칙 - 모던 & 심플

### 디자인 철학
- **미니멀리즘**: 불필요한 요소 제거, 핵심 기능에 집중
- **화이트 스페이스**: 충분한 여백으로 시각적 여유
- **일관성**: 모든 페이지에서 동일한 패턴 유지
- **직관성**: 설명 없이도 사용 가능한 인터페이스

### 레이아웃
- **사이드바**: 좁고 깔끔한 아이콘 + 텍스트 형태 (hover 시 확장 선택적)
- **헤더**: 미니멀한 상단바 (페이지 타이틀 + 사용자 프로필)
- **컨텐츠**: 넉넉한 패딩과 마진 (답답함 제거)
- **카드**: 부드러운 그림자, 둥근 모서리 (border-radius: 12px)

### 색상 체계 (Modern & Clean)
```css
/* Light Mode 기본 */
--background: 0 0% 98%        /* 거의 흰색 배경 */
--foreground: 0 0% 10%        /* 진한 텍스트 */
--card: 0 0% 100%             /* 순백 카드 */
--primary: 220 90% 56%        /* 모던한 블루 */
--secondary: 220 15% 95%      /* 연한 회색 */
--muted: 220 15% 96%          /* 배경 강조 */
--accent: 220 90% 96%         /* 액센트 배경 */
--border: 220 13% 91%         /* 미묘한 보더 */

/* 상태 색상 - 채도 낮춤 */
--success: 142 71% 45%        /* 부드러운 초록 */
--warning: 38 92% 50%         /* 차분한 주황 */
--destructive: 0 72% 51%      /* 절제된 빨강 */
```

### 타이포그래피
- **폰트**: 
  - 한글: Pretendard (또는 SUIT)
  - 영문/숫자: Inter
- **크기**: 
  - 제목: text-2xl (24px) ~ text-3xl (30px)
  - 본문: text-base (16px)
  - 작은 텍스트: text-sm (14px)
- **굵기**: 
  - 제목: font-semibold (600)
  - 본문: font-normal (400)
- **행간**: leading-relaxed (1.625) - 가독성 우선

### 컴포넌트 스타일

**버튼**
- Primary: 배경 채움, 그림자 없음, hover 시 살짝 어둡게
- Secondary: 배경 투명, 얇은 보더, hover 시 배경색
- Ghost: 배경/보더 없음, hover 시 배경만
- 높이: h-10 (40px) 기본
- 패딩: px-4 py-2
- border-radius: rounded-lg (8px)

**카드**
- 배경: 순백 (white)
- 보더: 매우 얇음 (border border-gray-200)
- 그림자: shadow-sm (미묘한 그림자)
- 모서리: rounded-xl (12px)
- 패딩: p-6

**테이블**
- 헤더: 배경 없음, 하단 얇은 보더만
- 행: hover 시 배경색 변경 (bg-gray-50)
- 보더: 최소화 (행 사이 얇은 라인만)
- 간격: py-4 (충분한 세로 여백)
- 정렬: 좌측 정렬 기본, 숫자는 우측

**입력 필드**
- 배경: white
- 보더: 얇은 회색 (focus 시 primary 색상)
- 높이: h-10 (40px)
- border-radius: rounded-lg (8px)
- placeholder: text-gray-400

**모달**
- 배경 오버레이: 블러 효과 (backdrop-blur-sm)
- 모달: 큰 border-radius (16px)
- 애니메이션: 부드러운 fade + scale

### 인터랙션

**호버 효과**
- 부드러운 transition (transition-colors duration-200)
- 미묘한 색상 변화 (과하지 않게)
- 버튼은 transform 없음 (scale 사용 X)

**로딩**
- Skeleton UI 우선 (실제 레이아웃 미리보기)
- Spinner는 최소한으로 (작은 액션만)
- 색상: 배경과 유사한 회색 톤

**피드백**
- Toast: 우측 상단, 간결한 메시지
- 성공: 초록색 아이콘 + 텍스트
- 에러: 빨간색 아이콘 + 텍스트
- 자동 사라짐 (3-4초)

**빈 상태**
- 심플한 아이콘 (lucide-react)
- 짧은 설명 문구
- CTA 버튼 (필요시)

### 아이콘 시스템
- **라이브러리**: lucide-react (일관된 스타일)
- **크기**: 
  - 작음: size={16}
  - 기본: size={20}
  - 큼: size={24}
- **색상**: 텍스트 색상과 동일하게
- **사용**: 의미 전달용으로만 (장식 X)

### 그리드 & 간격
- 그리드: 12 컬럼 시스템
- 간격: 4px 단위 (gap-4, gap-6, gap-8)
- 컨테이너: max-w-7xl (1280px) 기본

### 반응형
- **데스크톱** (1280px+): 기본 레이아웃
- **태블릿** (768px~1279px): 사이드바 축소 또는 숨김
- **모바일** (<768px): 필수 기능만, 햄버거 메뉴

### 다크모드 (선택사항)
- 다크모드 지원 준비 (Tailwind dark: prefix)
- 토글은 사용자 프로필 메뉴에 배치
- 색상: 진한 회색 배경 (완전한 검정 X)

### 애니메이션 원칙
- **최소화**: 필요한 곳에만
- **빠르게**: 200ms 이하
- **자연스럽게**: ease-in-out
- **실용적**: 사용자 경험 개선 목적만

### 금지 사항
- ❌ 불필요한 그라데이션
- ❌ 과한 그림자 효과
- ❌ 너무 많은 색상 사용
- ❌ 복잡한 애니메이션
- ❌ 작은 폰트 (14px 미만 본문)
- ❌ 장식용 요소

## 보안 규칙

### 인증
- 모든 페이지는 로그인 필수 (login 페이지 제외)
- 세션 만료 시 자동 로그아웃 후 로그인 페이지 이동
- Supabase Row Level Security (RLS) 적용

### 권한
- 클라이언트와 서버 양측에서 권한 검증
- 민감한 정보 (급여 등)는 Admin/Owner만 조회
- API Route에서 반드시 권한 재확인

### 데이터 보호
- 개인정보 (전화번호 등) 마스킹 옵션
- 민감 데이터는 HTTPS로만 전송
- 로그에 개인정보 기록 금지

## 금지 사항
- `localStorage`/`sessionStorage` 사용 금지 (Supabase session 사용)
- 하드코딩된 권한 체크 (권한 시스템 통해서만)
- 주석 없는 복잡한 로직
- 컴포넌트에서 직접 DB 쿼리 (lib/supabase 함수 사용)

## 개발 우선순위
1. ✅ 로그인 (완료)
2. 🔄 권한 시스템 구현
3. 📋 학생 관리 (CRUD)
4. 📅 등/하원 관리
5. 📚 학습 관리 (성적)
6. 💰 결제 관리
7. 👨‍🏫 강사 관리
8. 🏫 수업 관리
9. 📊 대시보드 위젯
10. 🔔 알림 시스템 (향후)

## 주석 및 문서화
- 모든 주석은 한국어로 작성
- 복잡한 로직은 반드시 주석 설명
- 함수/컴포넌트 상단에 용도 설명
- README.md에 환경 설정 및 실행 방법 문서화

## Git 컨벤션
- feat: 새 기능
- fix: 버그 수정
- refactor: 리팩토링
- style: 코드 포맷팅
- docs: 문서 수정
- chore: 기타 작업

예: `feat: 학생 목록 조회 기능 추가`